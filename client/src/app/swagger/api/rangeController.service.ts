/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {Observable} from 'rxjs/Observable';

import {Range} from '../model/range';
import {SearchResultRange} from '../model/searchResultRange';

import {BASE_PATH, COLLECTION_FORMATS} from '../variables';
import {Configuration} from '../configuration';


@Injectable()
export class RangeControllerService {

    protected basePath = 'http://localhost:9999';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createRange
     *
     * @param range range
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createRangeUsingPOST(range: Range, observe?: 'body', reportProgress?: boolean): Observable<Range>;
    public createRangeUsingPOST(range: Range, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Range>>;
    public createRangeUsingPOST(range: Range, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Range>>;
    public createRangeUsingPOST(range: Range, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (range === null || range === undefined) {
            throw new Error('Required parameter range was null or undefined when calling createRangeUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Range>(`${this.basePath}/api/range/create`,
            range,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteRange
     *
     * @param ids ids
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteRangeUsingPOST(ids: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public deleteRangeUsingPOST(ids: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public deleteRangeUsingPOST(ids: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public deleteRangeUsingPOST(ids: Array<number>, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (ids === null || ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteRangeUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/api/range/delete`,
            ids,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getRange
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRangeUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<Range>;
    public getRangeUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Range>>;
    public getRangeUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Range>>;
    public getRangeUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRangeUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [];

        return this.httpClient.get<Range>(`${this.basePath}/api/range/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getRangesList
     *
     * @param propertySearch propertySearch
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRangesListUsingPOST(propertySearch?: any, observe?: 'body', reportProgress?: boolean): Observable<SearchResultRange>;
    public getRangesListUsingPOST(propertySearch?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchResultRange>>;
    public getRangesListUsingPOST(propertySearch?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchResultRange>>;
    public getRangesListUsingPOST(propertySearch?: any, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (propertySearch === null || propertySearch === undefined) {
            propertySearch = {};
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SearchResultRange>(`${this.basePath}/api/range`,
            propertySearch,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateRange
     *
     * @param range range
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateRangeUsingPUT(range: Range, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public updateRangeUsingPUT(range: Range, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public updateRangeUsingPUT(range: Range, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public updateRangeUsingPUT(range: Range, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (range === null || range === undefined) {
            throw new Error('Required parameter range was null or undefined when calling updateRangeUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<boolean>(`${this.basePath}/api/range/update`,
            range,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
